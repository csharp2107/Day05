//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using LinqConnect template.
// Code is generated on: 05/08/2021 11:32:20
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using Devart.Data.Linq;
using Devart.Data.Linq.Mapping;
using System.Data;
using System.ComponentModel;
using System.Collections.Generic;
using System.Reflection;
using System.Linq;
using System.Linq.Expressions;

namespace WorldContext
{

    [DatabaseAttribute(Name = "world")]
    [ProviderAttribute(typeof(Devart.Data.MySql.Linq.Provider.MySqlDataProvider))]
    public partial class WorldDataContext : Devart.Data.Linq.DataContext
    {
        public static CompiledQueryCache compiledQueryCache = CompiledQueryCache.RegisterDataContext(typeof(WorldDataContext));
        private static MappingSource mappingSource = new Devart.Data.Linq.Mapping.AttributeMappingSource();

        #region Extensibility Method Definitions
    
        partial void OnCreated();
        partial void OnSubmitError(Devart.Data.Linq.SubmitErrorEventArgs args);
        partial void InsertCountry(Country instance);
        partial void UpdateCountry(Country instance);
        partial void DeleteCountry(Country instance);
        partial void InsertCity(City instance);
        partial void UpdateCity(City instance);
        partial void DeleteCity(City instance);
        partial void InsertCountrylanguage(Countrylanguage instance);
        partial void UpdateCountrylanguage(Countrylanguage instance);
        partial void DeleteCountrylanguage(Countrylanguage instance);

        #endregion

        public WorldDataContext() :
        base(GetConnectionString("WorldDataContextConnectionString"), mappingSource)
        {
            OnCreated();
        }

        public WorldDataContext(MappingSource mappingSource) :
        base(GetConnectionString("WorldDataContextConnectionString"), mappingSource)
        {
            OnCreated();
        }

        private static string GetConnectionString(string connectionStringName)
        {
            System.Configuration.ConnectionStringSettings connectionStringSettings = System.Configuration.ConfigurationManager.ConnectionStrings[connectionStringName];
            if (connectionStringSettings == null)
                throw new InvalidOperationException("Connection string \"" + connectionStringName +"\" could not be found in the configuration file.");
            return connectionStringSettings.ConnectionString;
        }

        public WorldDataContext(string connection) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public WorldDataContext(System.Data.IDbConnection connection) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public WorldDataContext(string connection, MappingSource mappingSource) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public WorldDataContext(System.Data.IDbConnection connection, MappingSource mappingSource) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public Devart.Data.Linq.Table<Country> Countries
        {
            get
            {
                return this.GetTable<Country>();
            }
        }

        public Devart.Data.Linq.Table<City> Cities
        {
            get
            {
                return this.GetTable<City>();
            }
        }

        public Devart.Data.Linq.Table<Countrylanguage> Countrylanguages
        {
            get
            {
                return this.GetTable<Countrylanguage>();
            }
        }
    }
}

namespace WorldContext
{

    /// <summary>
    /// There are no comments for WorldContext.Country in the schema.
    /// </summary>
    [Table(Name = @"world.country")]
    public partial class Country : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private string _Code = @"";

        private string _Name = @"";

        private string _Continent = @"Asia";

        private string _Region = @"";

        private decimal _SurfaceArea = 0.00m;

        private short? _IndepYear;

        private int _Population = 0;

        private decimal? _LifeExpectancy;

        private decimal? _GNP;

        private decimal? _GNPOld;

        private string _LocalName = @"";

        private string _GovernmentForm = @"";

        private string _HeadOfState;

        private int? _Capital;

        private string _Code2 = @"";
        #pragma warning restore 0649

        private EntitySet<City> _Cities;

        private EntitySet<Countrylanguage> _Countrylanguages;

        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnCodeChanging(string value);
        partial void OnCodeChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnContinentChanging(string value);
        partial void OnContinentChanged();
        partial void OnRegionChanging(string value);
        partial void OnRegionChanged();
        partial void OnSurfaceAreaChanging(decimal value);
        partial void OnSurfaceAreaChanged();
        partial void OnIndepYearChanging(short? value);
        partial void OnIndepYearChanged();
        partial void OnPopulationChanging(int value);
        partial void OnPopulationChanged();
        partial void OnLifeExpectancyChanging(decimal? value);
        partial void OnLifeExpectancyChanged();
        partial void OnGNPChanging(decimal? value);
        partial void OnGNPChanged();
        partial void OnGNPOldChanging(decimal? value);
        partial void OnGNPOldChanged();
        partial void OnLocalNameChanging(string value);
        partial void OnLocalNameChanged();
        partial void OnGovernmentFormChanging(string value);
        partial void OnGovernmentFormChanged();
        partial void OnHeadOfStateChanging(string value);
        partial void OnHeadOfStateChanged();
        partial void OnCapitalChanging(int? value);
        partial void OnCapitalChanged();
        partial void OnCode2Changing(string value);
        partial void OnCode2Changed();
        #endregion

        public Country()
        {
            this._Cities = new EntitySet<City>(new Action<City>(this.attach_Cities), new Action<City>(this.detach_Cities));
            this._Countrylanguages = new EntitySet<Countrylanguage>(new Action<Countrylanguage>(this.attach_Countrylanguages), new Action<Countrylanguage>(this.detach_Countrylanguages));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Code in the schema.
        /// </summary>
        [Column(Storage = "_Code", CanBeNull = false, DbType = "CHAR(3) NOT NULL", IsPrimaryKey = true)]
        public string Code
        {
            get
            {
                return this._Code;
            }
            set
            {
                if (this._Code != value)
                {
                    this.OnCodeChanging(value);
                    this.SendPropertyChanging("Code");
                    this._Code = value;
                    this.SendPropertyChanged("Code");
                    this.OnCodeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Name in the schema.
        /// </summary>
        [Column(Storage = "_Name", CanBeNull = false, DbType = "CHAR(52) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if (this._Name != value)
                {
                    this.OnNameChanging(value);
                    this.SendPropertyChanging("Name");
                    this._Name = value;
                    this.SendPropertyChanged("Name");
                    this.OnNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Continent in the schema.
        /// </summary>
        [Column(Storage = "_Continent", CanBeNull = false, DbType = "ENUM NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Continent
        {
            get
            {
                return this._Continent;
            }
            set
            {
                if (this._Continent != value)
                {
                    this.OnContinentChanging(value);
                    this.SendPropertyChanging("Continent");
                    this._Continent = value;
                    this.SendPropertyChanged("Continent");
                    this.OnContinentChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Region in the schema.
        /// </summary>
        [Column(Storage = "_Region", CanBeNull = false, DbType = "CHAR(26) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Region
        {
            get
            {
                return this._Region;
            }
            set
            {
                if (this._Region != value)
                {
                    this.OnRegionChanging(value);
                    this.SendPropertyChanging("Region");
                    this._Region = value;
                    this.SendPropertyChanged("Region");
                    this.OnRegionChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SurfaceArea in the schema.
        /// </summary>
        [Column(Storage = "_SurfaceArea", CanBeNull = false, DbType = "DECIMAL(10,2) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public decimal SurfaceArea
        {
            get
            {
                return this._SurfaceArea;
            }
            set
            {
                if (this._SurfaceArea != value)
                {
                    this.OnSurfaceAreaChanging(value);
                    this.SendPropertyChanging("SurfaceArea");
                    this._SurfaceArea = value;
                    this.SendPropertyChanged("SurfaceArea");
                    this.OnSurfaceAreaChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for IndepYear in the schema.
        /// </summary>
        [Column(Storage = "_IndepYear", DbType = "SMALLINT(6) NULL", UpdateCheck = UpdateCheck.Never)]
        public short? IndepYear
        {
            get
            {
                return this._IndepYear;
            }
            set
            {
                if (this._IndepYear != value)
                {
                    this.OnIndepYearChanging(value);
                    this.SendPropertyChanging("IndepYear");
                    this._IndepYear = value;
                    this.SendPropertyChanged("IndepYear");
                    this.OnIndepYearChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Population in the schema.
        /// </summary>
        [Column(Storage = "_Population", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int Population
        {
            get
            {
                return this._Population;
            }
            set
            {
                if (this._Population != value)
                {
                    this.OnPopulationChanging(value);
                    this.SendPropertyChanging("Population");
                    this._Population = value;
                    this.SendPropertyChanged("Population");
                    this.OnPopulationChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for LifeExpectancy in the schema.
        /// </summary>
        [Column(Storage = "_LifeExpectancy", DbType = "DECIMAL(3,1) NULL", UpdateCheck = UpdateCheck.Never)]
        public decimal? LifeExpectancy
        {
            get
            {
                return this._LifeExpectancy;
            }
            set
            {
                if (this._LifeExpectancy != value)
                {
                    this.OnLifeExpectancyChanging(value);
                    this.SendPropertyChanging("LifeExpectancy");
                    this._LifeExpectancy = value;
                    this.SendPropertyChanged("LifeExpectancy");
                    this.OnLifeExpectancyChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for GNP in the schema.
        /// </summary>
        [Column(Storage = "_GNP", DbType = "DECIMAL(10,2) NULL", UpdateCheck = UpdateCheck.Never)]
        public decimal? GNP
        {
            get
            {
                return this._GNP;
            }
            set
            {
                if (this._GNP != value)
                {
                    this.OnGNPChanging(value);
                    this.SendPropertyChanging("GNP");
                    this._GNP = value;
                    this.SendPropertyChanged("GNP");
                    this.OnGNPChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for GNPOld in the schema.
        /// </summary>
        [Column(Storage = "_GNPOld", DbType = "DECIMAL(10,2) NULL", UpdateCheck = UpdateCheck.Never)]
        public decimal? GNPOld
        {
            get
            {
                return this._GNPOld;
            }
            set
            {
                if (this._GNPOld != value)
                {
                    this.OnGNPOldChanging(value);
                    this.SendPropertyChanging("GNPOld");
                    this._GNPOld = value;
                    this.SendPropertyChanged("GNPOld");
                    this.OnGNPOldChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for LocalName in the schema.
        /// </summary>
        [Column(Storage = "_LocalName", CanBeNull = false, DbType = "CHAR(45) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string LocalName
        {
            get
            {
                return this._LocalName;
            }
            set
            {
                if (this._LocalName != value)
                {
                    this.OnLocalNameChanging(value);
                    this.SendPropertyChanging("LocalName");
                    this._LocalName = value;
                    this.SendPropertyChanged("LocalName");
                    this.OnLocalNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for GovernmentForm in the schema.
        /// </summary>
        [Column(Storage = "_GovernmentForm", CanBeNull = false, DbType = "CHAR(45) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string GovernmentForm
        {
            get
            {
                return this._GovernmentForm;
            }
            set
            {
                if (this._GovernmentForm != value)
                {
                    this.OnGovernmentFormChanging(value);
                    this.SendPropertyChanging("GovernmentForm");
                    this._GovernmentForm = value;
                    this.SendPropertyChanged("GovernmentForm");
                    this.OnGovernmentFormChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for HeadOfState in the schema.
        /// </summary>
        [Column(Storage = "_HeadOfState", DbType = "CHAR(60) NULL", UpdateCheck = UpdateCheck.Never)]
        public string HeadOfState
        {
            get
            {
                return this._HeadOfState;
            }
            set
            {
                if (this._HeadOfState != value)
                {
                    this.OnHeadOfStateChanging(value);
                    this.SendPropertyChanging("HeadOfState");
                    this._HeadOfState = value;
                    this.SendPropertyChanged("HeadOfState");
                    this.OnHeadOfStateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Capital in the schema.
        /// </summary>
        [Column(Storage = "_Capital", DbType = "INT(11) NULL", UpdateCheck = UpdateCheck.Never)]
        public int? Capital
        {
            get
            {
                return this._Capital;
            }
            set
            {
                if (this._Capital != value)
                {
                    this.OnCapitalChanging(value);
                    this.SendPropertyChanging("Capital");
                    this._Capital = value;
                    this.SendPropertyChanged("Capital");
                    this.OnCapitalChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Code2 in the schema.
        /// </summary>
        [Column(Storage = "_Code2", CanBeNull = false, DbType = "CHAR(2) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Code2
        {
            get
            {
                return this._Code2;
            }
            set
            {
                if (this._Code2 != value)
                {
                    this.OnCode2Changing(value);
                    this.SendPropertyChanging("Code2");
                    this._Code2 = value;
                    this.SendPropertyChanged("Code2");
                    this.OnCode2Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Cities in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Country_City", Storage="_Cities", ThisKey="Code", OtherKey="CountryCode", DeleteRule="RESTRICT")]
        public EntitySet<City> Cities
        {
            get
            {
                return this._Cities;
            }
            set
            {
                this._Cities.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for Countrylanguages in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Country_Countrylanguage", Storage="_Countrylanguages", ThisKey="Code", OtherKey="CountryCode", DeleteRule="RESTRICT")]
        public EntitySet<Countrylanguage> Countrylanguages
        {
            get
            {
                return this._Countrylanguages;
            }
            set
            {
                this._Countrylanguages.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_Cities(City entity)
        {
            this.SendPropertyChanging("Cities");
            entity.Country = this;
        }
    
        private void detach_Cities(City entity)
        {
            this.SendPropertyChanging("Cities");
            entity.Country = null;
        }

        private void attach_Countrylanguages(Countrylanguage entity)
        {
            this.SendPropertyChanging("Countrylanguages");
            entity.Country = this;
        }
    
        private void detach_Countrylanguages(Countrylanguage entity)
        {
            this.SendPropertyChanging("Countrylanguages");
            entity.Country = null;
        }
    }

    /// <summary>
    /// There are no comments for WorldContext.City in the schema.
    /// </summary>
    [Table(Name = @"world.city")]
    public partial class City : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _ID;

        private string _Name = @"";

        private string _CountryCode = @"";

        private string _District = @"";

        private int _Population = 0;
        #pragma warning restore 0649

        private EntityRef<Country> _Country;

        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnCountryCodeChanging(string value);
        partial void OnCountryCodeChanged();
        partial void OnDistrictChanging(string value);
        partial void OnDistrictChanged();
        partial void OnPopulationChanging(int value);
        partial void OnPopulationChanged();
        #endregion

        public City()
        {
            this._Country  = default(EntityRef<Country>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for ID in the schema.
        /// </summary>
        [Column(Storage = "_ID", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT(11) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if (this._ID != value)
                {
                    this.OnIDChanging(value);
                    this.SendPropertyChanging("ID");
                    this._ID = value;
                    this.SendPropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Name in the schema.
        /// </summary>
        [Column(Storage = "_Name", CanBeNull = false, DbType = "CHAR(35) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if (this._Name != value)
                {
                    this.OnNameChanging(value);
                    this.SendPropertyChanging("Name");
                    this._Name = value;
                    this.SendPropertyChanged("Name");
                    this.OnNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CountryCode in the schema.
        /// </summary>
        [Column(Storage = "_CountryCode", CanBeNull = false, DbType = "CHAR(3) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string CountryCode
        {
            get
            {
                return this._CountryCode;
            }
            set
            {
                if (this._CountryCode != value)
                {
                    if (this._Country.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnCountryCodeChanging(value);
                    this.SendPropertyChanging("CountryCode");
                    this._CountryCode = value;
                    this.SendPropertyChanged("CountryCode");
                    this.OnCountryCodeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for District in the schema.
        /// </summary>
        [Column(Storage = "_District", CanBeNull = false, DbType = "CHAR(20) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string District
        {
            get
            {
                return this._District;
            }
            set
            {
                if (this._District != value)
                {
                    this.OnDistrictChanging(value);
                    this.SendPropertyChanging("District");
                    this._District = value;
                    this.SendPropertyChanged("District");
                    this.OnDistrictChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Population in the schema.
        /// </summary>
        [Column(Storage = "_Population", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int Population
        {
            get
            {
                return this._Population;
            }
            set
            {
                if (this._Population != value)
                {
                    this.OnPopulationChanging(value);
                    this.SendPropertyChanging("Population");
                    this._Population = value;
                    this.SendPropertyChanged("Population");
                    this.OnPopulationChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Country in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Country_City", Storage="_Country", ThisKey="CountryCode", OtherKey="Code", IsForeignKey=true)]
        public Country Country
        {
            get
            {
                return this._Country.Entity;
            }
            set
            {
                Country previousValue = this._Country.Entity;
                if ((previousValue != value) || (this._Country.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("Country");
                    if (previousValue != null)
                    {
                        this._Country.Entity = null;
                        previousValue.Cities.Remove(this);
                    }
                    this._Country.Entity = value;
                    if (value != null)
                    {
                        this._CountryCode = value.Code;
                        value.Cities.Add(this);
                    }
                    else
                    {
                        this._CountryCode = default(string);
                    }
                    this.SendPropertyChanged("Country");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for WorldContext.Countrylanguage in the schema.
    /// </summary>
    [Table(Name = @"world.countrylanguage")]
    public partial class Countrylanguage : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private string _CountryCode = @"";

        private string _Language = @"";

        private string _IsOfficial = @"F";

        private decimal _Percentage = 0.0m;
        #pragma warning restore 0649

        private EntityRef<Country> _Country;

        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnCountryCodeChanging(string value);
        partial void OnCountryCodeChanged();
        partial void OnLanguageChanging(string value);
        partial void OnLanguageChanged();
        partial void OnIsOfficialChanging(string value);
        partial void OnIsOfficialChanged();
        partial void OnPercentageChanging(decimal value);
        partial void OnPercentageChanged();
        #endregion

        public Countrylanguage()
        {
            this._Country  = default(EntityRef<Country>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for CountryCode in the schema.
        /// </summary>
        [Column(Storage = "_CountryCode", CanBeNull = false, DbType = "CHAR(3) NOT NULL", IsPrimaryKey = true)]
        public string CountryCode
        {
            get
            {
                return this._CountryCode;
            }
            set
            {
                if (this._CountryCode != value)
                {
                    if (this._Country.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnCountryCodeChanging(value);
                    this.SendPropertyChanging("CountryCode");
                    this._CountryCode = value;
                    this.SendPropertyChanged("CountryCode");
                    this.OnCountryCodeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Language in the schema.
        /// </summary>
        [Column(Storage = "_Language", CanBeNull = false, DbType = "CHAR(30) NOT NULL", IsPrimaryKey = true)]
        public string Language
        {
            get
            {
                return this._Language;
            }
            set
            {
                if (this._Language != value)
                {
                    this.OnLanguageChanging(value);
                    this.SendPropertyChanging("Language");
                    this._Language = value;
                    this.SendPropertyChanged("Language");
                    this.OnLanguageChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for IsOfficial in the schema.
        /// </summary>
        [Column(Storage = "_IsOfficial", CanBeNull = false, DbType = "ENUM NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string IsOfficial
        {
            get
            {
                return this._IsOfficial;
            }
            set
            {
                if (this._IsOfficial != value)
                {
                    this.OnIsOfficialChanging(value);
                    this.SendPropertyChanging("IsOfficial");
                    this._IsOfficial = value;
                    this.SendPropertyChanged("IsOfficial");
                    this.OnIsOfficialChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Percentage in the schema.
        /// </summary>
        [Column(Storage = "_Percentage", CanBeNull = false, DbType = "DECIMAL(4,1) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public decimal Percentage
        {
            get
            {
                return this._Percentage;
            }
            set
            {
                if (this._Percentage != value)
                {
                    this.OnPercentageChanging(value);
                    this.SendPropertyChanging("Percentage");
                    this._Percentage = value;
                    this.SendPropertyChanged("Percentage");
                    this.OnPercentageChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Country in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Country_Countrylanguage", Storage="_Country", ThisKey="CountryCode", OtherKey="Code", IsForeignKey=true)]
        public Country Country
        {
            get
            {
                return this._Country.Entity;
            }
            set
            {
                Country previousValue = this._Country.Entity;
                if ((previousValue != value) || (this._Country.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("Country");
                    if (previousValue != null)
                    {
                        this._Country.Entity = null;
                        previousValue.Countrylanguages.Remove(this);
                    }
                    this._Country.Entity = value;
                    if (value != null)
                    {
                        this._CountryCode = value.Code;
                        value.Countrylanguages.Add(this);
                    }
                    else
                    {
                        this._CountryCode = default(string);
                    }
                    this.SendPropertyChanged("Country");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

}
